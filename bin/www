#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('MEAN2:server');
var http = require('http');
var express = require('express');
var router = express.Router();
var mongoose = require('mongoose');
var schema = require('../model/schema');
var database = require('../model/database');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

var users = [];

io.on('connection', function (socket) {
    // On client emit new message like:
    // socket.emit('new chat message', {
    //     body: get message body,
    //     author: get the author,
    //     author_id: get the author id,
    //     room_id: get the room id
    // });
    socket.on('new-message', function (data) {
        var instance = new schema.Message(data);
        instance.save(function (err, Message) {
            if (err)
                return console.error(err);
            console.log("Save success: ", Message);
        });
        io.emit('update-data', data);
    });

    socket.on('create-room', function (data) {
        var instance = new schema.Room(data);
        instance.save(function (err, Room) {
            if (err)
                return console.error(err);
            console.log("Save success: ", Room);
        });
        io.emit('update-data', data);
    });

    function checkUsers(login) {
        var status = false;
        users.forEach(function (user) {
            if (user.login == login) {
                status = true;
            }
        });
        return status;
    }


    socket.on('get_username', function () {
        users.forEach(function (user) {
            if (user.id == socket.id) {
                io.emit('return_username', user.login);
            }
        });
    });

    socket.on('get_rooms', function () {
        var messages = mongoose.model('Message');
        var rooms = mongoose.model('Room');
        rooms.find({}, function (err, db_rooms) {
            if (err) {
                console.error(err);
                res.render(err);
            }
            else {
                messages.find({}, function (err, db_messages) {
                    if (err) {
                        console.error(err);
                        res.render(err);
                    }
                    else {

                        var obj = {
                            title: 'Chat',
                            rooms: db_rooms,
                            messages: db_messages
                        };
                        io.emit('return_rooms', obj);
                    }
                })
            }
        })

    });

    socket.on('new_user', function (data) {
        if (checkUsers(data) == false) {
            var obj = {
                login: data,
                id: socket.id
            };
            users.push(obj);
            io.emit('username_free', data);
        } else {
            io.emit('username_taken', data);
        }
    });



    socket.on('disconnect', function () {
      setTimeout(function () {
          var i = users.indexOf(socket);
          users.splice(i, 1);
      },60000)
    });
});


// On client do:
// socket.on('messages-'+chat.room_id, function (data) {
//     Manage incoming data here.
//     console.log(data);
// });
// This will subscribe to the channel with the current room id. Remember to update on room change.

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log('Listening on ' + bind);
}
